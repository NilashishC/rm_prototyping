#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2019 Red Hat
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for nxos_snmp
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
  'metadata_version': '1.1',
  'status': ['preview'],
  'supported_by': 'network'
}

DOCUMENTATION = """
---
module: nxos_snmp
version_added: 2.9
short_description: Manage the SNMP configuration on NX-OS
description: Manage the SNMP configuration on NX-OS
author: Bradley Thornton (cidrblock)
notes:
  - Tested against <network_os> 7.3.(0)D1(1) on VIRL
options:
  config:
    description: A dictionary of SNMP configuration attributes
    type: dict
    suboptions:
      aaa_user:
        description: Duration for which aaa-cached snmp user exists
        type: dict
        suboptions:
          cache_timeout:
            description: Timeout for which aaa-cached user exists(in secs)
            type: int
      communities:
        type: list
        elements: dict
        suboptions:
          community:
            description:
              - The SNMP community string
            type: str
          acl:
            description:
              - The acl applied to the SNMP community string
            type: str
          group:
            description:
            - Group to which the community belongs
            type: str
          ipv4acl:
            description:
              - The ipv4acl applied to the SNMP community string
            type: str
          ipv6acl:
            description:
              - The ipv6acl applied to the SNMP community string
            type: str
      contact:
        description:
        - The SNMP contact
        type: str
      enable:
        description: Enable snmp protocol operations
        type: bool
      engine_id:
        description: Configure a local SNMPv3 engineID
        type: dict
        suboptions:
          local:
            description: EngineID of the local agent
            type: str
      global_enforce_priv:
        description:
        - Globally enforce privacy for all the users
        type: bool
      hosts:
        description:
        - Specify hosts to receive SNMP notifications
        type: list
        elements: dict
        suboptions:
          community:
            description:
            - SNMP community string or SNMPv3 user name
            type: str
          host:
            description:
            - IPv4 or IPv6 address or DNS Name of SNMP notification host
            type: str
          message_type:
            description:
            - The message type to send to this host
            type: str
            choices:
            - informs
            - traps
          security_level:
            description:
            - The SNMPv3 security Level
            type: str
            choices:
            - auth
            - priv
          source_interface:
            description:
            - Source interface to be used for sending out SNMP notifications to this host
            type: str
          udp_port:
            description:
            - The notification host's UDP port number
            type: int
          version:
            description:
            - SNMP version to use for notification messages (1, 2c or 3)
            type: str
          vrf:
            type: dict
            suboptions:
              filter:
                description:
                - Filters notifications to the notification host receiver based on the configured VRFs
                type: list
                elements: str
              use:
                description:
                - Configures SNMP to use the selected VRF to communicate with the host receiver
                type: str



      location:
        description:
        - The SNMP location
        type: str
      packetsize:
        description: Largest SNMP packet size
        type: int
      source_interface:
        description: Source interface to be used for sending out SNMP notifications
        type: dict
        suboptions:
          informs:
            description: Source interface for SNMP inform notifications
            type: str
          traps:
            description: Source interface for SNMP trap notifications
            type: str
      traps:
        type: list
        elements: dict
        suboptions:
          type:
            description: The type of traps to enable
            type: str
          names:
            description: The names of the trap subtypes
            type: list
            elements: dict
            suboptions:
              name:
                description: The name of the trap subtype
                type: str
              negate:
                description: Prepend the configuration line with 'no'
                type: bool
      users:
        type: list
        elements: dict
        suboptions:
          username:
            description:
            - Name of the user
            required: true
            type: str
          aes_128:
            description:
            - Use 128-bit AES algorithm for privacy
            type: bool
          algorithm:
            description:
            - Use HMAC MD5 or SHA algorithm for authentication
            type: str
            choices:
            - md5
            - sha
          enforce_priv:
            description: Enforce privacy for the user
            type: bool
          engine_id:
            description:
            - EngineID for configuring notif target user
            type: str
          groups:
            description:
            - Group names
            type: list
            elements: str
          ipv4acl:
            description:
            - IPv4 ACL name to filter snmp requests
            type: str
          ipv6acl:
            description:
            - IPv6 ACL name to filter snmp requests
            type: str
          localized_key:
            description:
            - Specifies whether the passwords are in localized key format
            type: bool
          password:
            description:
            - Authentication password for user
            type: str
          privacy_password:
            description:
            - Privacy password for user
            type: str
  state:
    description:
      - The state the configuration should be left in.
    type: str
    choices:
      - merged
      - replaced
      - overridden
      - deleted
      - template
    default: merged
"""
EXAMPLES = """












"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.network.nxos.argspec.snmp.snmp import SnmpArgs
from ansible.module_utils.network.nxos.config.snmp.snmp import Snmp


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=SnmpArgs.argument_spec,
                           supports_check_mode=True)

    result = Snmp(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
